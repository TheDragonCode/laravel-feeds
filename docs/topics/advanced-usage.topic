<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
        title="Advanced Usage" id="advanced-usage">

    <link-summary>Extended use of %instance%</link-summary>
    <card-summary>Extended use of %instance%</card-summary>
    <web-summary>Extended use of %instance%</web-summary>

    <show-structure depth="3" />

    <note title="Reserved directives">
        <list>
            <li><a href="#_attributes" /></li>
            <li><a href="#_value" /></li>
            <li><a href="#_cdata" /></li>
            <li><a href="#_mixed" /></li>
            <li><a href="#_custom" /></li>
        </list>

        <p>
            The use of directives is available only when generating feeds in the XML format.
        </p>
    </note>

    <chapter title="Elements" id="elements">
        <chapter title="Root element" id="root_element">
            <secondary-label ref="format-xml" />
            <secondary-label ref="format-json" />

            <tip>
                <p>
                    By default, the name of the root element is derived from the base name of the feed class.
                </p>

                <p>
                    For example, for the <code>App\Feeds\FooBarFeed</code> class, the name is <code>foo_bar</code>.
                </p>
            </tip>

            <p>
                To add a root element and/or its attributes, override the <code>root</code> method:
            </p>

            <code-block lang="php" src="advanced-element-root.php" include-lines="5-" />

            <p>
                To disable the addition of the root element, specify its name as empty — <code>null</code> or
                <code>""</code>.
            </p>

            <p>
                This code will result in:
            </p>

            <code-block lang="xml" src="advanced-element-root.xml" />
        </chapter>

        <chapter title="Information" id="information">
            <secondary-label ref="format-xml" />
            <secondary-label ref="format-json" />

            <p>
                To add information to the beginning of the root element (if present) or without it,
                override the
                <code>info</code> method in the feed class and create an object that extends the
                <code>DragonCode\LaravelFeed\Feeds\Info\FeedInfo</code> class:
            </p>

            <code-block lang="php" src="advanced-element-info.php" include-lines="5-" />
            <code-block lang="php" src="advanced-element-info-info.php" include-lines="5-" />

            <p>
                This code will result in:
            </p>

            <code-block lang="xml" src="advanced-element-info.xml" />

            <p>
                If you need to change the order in which the root element is output relative to the
                information block, set the <code>beforeInfo</code> parameter in the <code>root</code> method:
            </p>

            <code-block lang="php" src="advanced-element-info-before-false.php" include-lines="5-" />

            <p>
                This code will result in:
            </p>

            <code-block lang="xml" src="advanced-element-info-before-false.xml" />
        </chapter>

        <chapter title="Header &amp; footer" id="header_and_footer">
            <secondary-label ref="format-xml" />
            <secondary-label ref="format-json" />

            <p>
                To change the header and footer, override the <code>header</code> and <code>footer</code> methods:
            </p>

            <code-block lang="php" src="advanced-element-header-footer.php" include-lines="5-" />

            <p>
                This code will result in:
            </p>

            <code-block lang="xml" src="advanced-element-header-footer.xml" />
        </chapter>

        <chapter title="Attributes" id="attributes">
            <secondary-label ref="format-xml" />

            <code-block lang="php" src="advanced-element-attribute.php" include-lines="5-" />
            <code-block lang="php" src="advanced-element-attribute-item.php" include-lines="5-" />

            <p>
                This code will result in:
            </p>

            <code-block lang="xml" src="advanced-element-attribute.xml" />
        </chapter>
    </chapter>

    <chapter title="Directives" id="directives">
        <chapter title="@attributes" id="_attributes">
            <secondary-label ref="format-xml" />

            <link-summary>Indicates an array of attributes</link-summary>

            <p>
                You can use a key named <code>@attributes</code> to add attributes to a node:
            </p>

            <code-block lang="php" src="advanced-directive-attributes.php" include-lines="5-" />
            <code-block lang="php" src="advanced-directive-attributes-info.php" include-lines="5-" />
            <code-block lang="php" src="advanced-directive-attributes-item.php" include-lines="5-" />

            <p>
                This code will result in:
            </p>

            <code-block lang="xml" src="advanced-directive-attributes.xml" />
        </chapter>

        <chapter title="@value" id="_value">
            <secondary-label ref="format-xml" />

            <link-summary>Indicates the applicable value "as it is"</link-summary>

            <tip>
                Note that the value of the <code>@value</code> field must be a string.
            </tip>

            <p>
                You can use a key named <code>@value</code> to add value to a node:
            </p>

            <code-block lang="php" src="advanced-directive-value-item.php" include-lines="5-" />

            <p>
                This code will result in:
            </p>

            <code-block lang="xml" src="advanced-directive-value.xml" />
        </chapter>

        <chapter title="@cdata" id="_cdata">
            <secondary-label ref="format-xml" />

            <link-summary>Allows the use of XML markup without transformation</link-summary>

            <tip>
                It is also possible to wrap the value of a node into a CDATA section.
                This allows you to use reserved characters.
            </tip>

            <p>
                You can use a key named <code>@cdata</code> to add CDATA to a node:
            </p>

            <code-block lang="php" src="advanced-directive-cdata.php" include-lines="5-" />

            <p>
                This code will result in:
            </p>

            <code-block lang="xml" src="advanced-directive-cdata.xml" />
        </chapter>

        <chapter title="@mixed" id="_mixed">
            <secondary-label ref="format-xml" />

            <link-summary>Allows you to use XML markup directly within the structure of the document</link-summary>

            <p>
                To insert XML fragments “as is”, use the <code>@mixed</code> directive:
            </p>

            <code-block lang="php" src="advanced-directive-mixed.php" include-lines="5-" />

            <p>
                This code will result in:
            </p>

            <code-block lang="xml" src="advanced-directive-mixed.xml" />
        </chapter>

        <chapter title="@custom" id="_custom">
            <secondary-label ref="format-xml" />

            <link-summary>Describes the possibility of listing an array of elements with the same keys</link-summary>

            <p>
                In some cases, you need to place an array of elements with the same names.
            </p>

            <p>
                To do this, add a <code>@</code> symbol to the start of the key name:
            </p>

            <code-block lang="php" src="advanced-directive-array.php" include-lines="5-" />

            <p>
                This code will result in:
            </p>

            <code-block lang="xml" src="advanced-directive-array.xml" />
        </chapter>
    </chapter>

    <chapter title="Location &amp; filename" id="location_and_filename">
        <p>
            By default, feeds are stored in <code>public</code> storage,
            and the file name will be automatically generated from the feed class name after
            <code>App\Feeds\</code> in <code>kebab-case</code> format.
            For example:
        </p>

        <code-block lang="text">
                # App\Feeds\UserFeed
                user-feed.xml
                
                # App\Feeds\Sitemaps\ProductFeed
                sitemaps-product-feed.xml
                </code-block>

        <p>
            You can change these values by overriding the <code>$storage</code> property and the
            <code>filename</code> method:
        </p>

        <code-block lang="php" src="advanced-feed-storage.php" include-lines="5-" />
    </chapter>

    <chapter title="Chunk size" id="chunk_size">
        <p>
            Database queries use chunks, which are <code>1000</code> items by default.
            You can change this by overriding the <code>chunkSize</code> method:
        </p>

        <code-block lang="php" src="advanced-feed-chunk.php" include-lines="5-" />
    </chapter>
</topic>
